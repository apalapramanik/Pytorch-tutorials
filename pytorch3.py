# -*- coding: utf-8 -*-
"""pytorch3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vvgGEz2SqiF1uJm7Ehg3bU3CTG-cfzqf
"""

# network that classifies digit images:
# https://pytorch.org/tutorials/beginner/blitz/neural_networks_tutorial.html

import torch
import torch.nn as nn
import torch.nn.functional as F

class Net(nn.Module):

  def __init__(self):
    super(Net, self).__init__()

    # input channel: 1, output channels: 6,  5x5 square convolution kernel
    self.conv1 = nn.Conv2d(1,6,5) #in( Number of channels in the input image), 
    # out( Number of channels produced by the convolution), kernel size(Size of the convolving kernel) 
    self.conv2 = nn.Conv2d(6,16,5)

    #affine operation:
    self.fc1 = nn.Linear(16*5*5, 120) #Applies a linear transformation to the incoming data: y = xA^T + b
    # in:size of each input sample, out:size of each output sample
    self.fc2 = nn.Linear(120, 84)
    self.fc3 = nn.Linear(84, 10)

  def forward(self,x):
    x = F.max_pool2d(F.relu(self.conv1(x)),(2,2)) #maxpooling over a 2x2 window
    x = F.max_pool2d(F.relu(self.conv2(x)), 2)
    x = torch.flatten(x, 1) #Flattens input by reshaping it into a one-dimensional tensor.
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = self.fc3(x)
    return x

net = Net()
print(net) 
params = list(net.parameters()) # learnable parameters of a model are returned by net.parameters()
print(len(params))
print(params[0].size() )

#try random 32x32 input:
input = torch.randn(1,1,32,32)
out = net(input)
print(out)

#Zero the gradient buffers of all parameters and backprops with random gradients:
net.zero_grad()
out.backward(torch.randn(1,10))

#Loss function:
#A loss function takes the (output, target) pair of inputs,
#and computes a value that estimates how far away the output is from the target

output = net(input)
target = torch.randn(10)
target  = target.view(1,-1)
criterion = nn.MSELoss()

loss = criterion(output,target)
print(loss)

#Backprop:
#To backpropagate the error all we have to do is to loss.backward().
# You need to clear the existing gradients though, 
#else gradients will be accumulated to existing gradients.

net.zero_grad() #zeroes the gradient buffers of all parameters
print('conv1.bias.grad before backward')
print(net.conv1.bias.grad)

loss.backward()

print('conv1.bias.grad after backward')
print(net.conv1.bias.grad)

#Update the weights: SGD: Stochastic Gradient Descent
# weight = weight - learning_rate * gradient

learning_rate = 0.01
for f in net.parameters():
  f.data.sub_(f.grad.data * learning_rate)

#using various update rules: 

import torch.optim as optim


# create your optimizer
optimizer = optim.SGD(net.parameters(), lr=0.01)

# in your training loop:
optimizer.zero_grad()   # zero the gradient buffers
output = net(input)
loss = criterion(output, target)
loss.backward()
optimizer.step()    # Does the update