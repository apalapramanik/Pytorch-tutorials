# -*- coding: utf-8 -*-
"""pytorch2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1juGYGWsUqDM-aCi9EEthoz4D2_eFT0-L
"""

#train a basic neural network: single training step
# https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html

import torch,torchvision
model = torchvision.models.resnet18(pretrained = True) #choose pretrained resnet18 model
data = torch.rand(1,3,64,64) #1: single image, 3: no of channels, 64: height & width
labels = torch.rand(1,1000)# shape of labels 

prediction = model(data) #forward pass
loss = (prediction - labels).sum()
loss.backward() #backward pass

#load an optimizer:

#optimizer here: SGD learning rate: 0.01, momentum = 0.9
optim = torch.optim.SGD(model.parameters(), lr = 1e-2, momentum = 0.9)

##initiate gradient descent : call .step()
optim.step() #optimizer adjusts each parameter by its gradient stored in .grad.